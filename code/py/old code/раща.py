# -*- coding: utf-8 -*-

"""
"""

import math
import random

import inspect

from matplotlib.patches import Polygon, Arc
import matplotlib.pyplot as plt
import numpy as np

from гаяметрія import (
	найти_радіусъ_вписаной_окружности_в_равнобедреный_треугольникъ,
	опредлить_радіусъ_черезъ_длину_дуги_и_уголъ_при_центре,
	найти_протяжённость_мђжду_точками,
	входитъ_ли_окружность_въ_окружность,
	найти_уголъ_при_центре_по_радіусу_и_длугости_хорды,
	найти_длину_дуги_окружности,
	определить_длину_отрезка_по_точкамъ,
	)


СЧЁТЧИКЪ_УЗЛОВЪ = {j: 0 for j in range(1, 25)}



def рачётъ_количества_и_стоимости_узловъ():
	pass


def приблизить():
	pass


def показать_углы_и_протяжённости():
	pass


def нарисовать_4_звонницы_вокругъ_куда(х0, у0, радіусъ_звонницъ):
	pass



def звезда_ра_сварога():
	# 24 узла по месту багита в камеа
	# 8 лепестков с взаимоналоженђм
	pass


def крђстъ_дыя_кельтский():
	pass


def колесо_дажбога_сансары():
	pass



def нарисовать_и_посчитать_узелъ(число, оси, plt, х, у, радіусъ_узла, цвђтъ):
	оси.add_patch(plt.Circle((х, у), радіусъ_узла, fill=0, color=цвђтъ))
	СЧЁТЧИКЪ_УЗЛОВЪ[число] += 1


def раща_1():
	
	рисунокъ, оси = plt.subplots()

	plt.title(inspect.currentframe().f_code.co_name)

	количество_алей = 22
	количество_рядовъ_образующихъ_уголъ = 3

	радіусъ_узла = 4
	діаметръ = 2 * радіусъ_узла

	цвђтъ = 'purple'

	точки_начала = (0, 0)
	х0 = точки_начала[0]
	у0 = точки_начала[1]

	количество_притворовъ = 5
	уголъ_для_притворовъ = 360 / количество_притворовъ

	радіусъ_кудъ = 1
	радіусъ_паперть = радіусъ_кудъ * 3
	радіусъ_сарковь = радіусъ_паперть * 4
	радіусъ_притворъ = найти_радіусъ_вписаной_окружности_в_равнобедреный_треугольникъ(радіусъ_сарковь, уголъ_для_притворовъ)
	радіусъ_окружности_притворовъ = радіусъ_сарковь - радіусъ_притворъ
	радіусъ_раща = радіусъ_кудъ * 24
	радіусъ_округа = радіусъ_раща * 1.2

	окружность_кудъ = plt.Circle(точки_начала, радіусъ_кудъ, fill=0, color='red')
	окружность_паперть = plt.Circle(точки_начала, радіусъ_паперть, fill=0, color='blue')
	окружность_сарковь = plt.Circle(точки_начала, радіусъ_сарковь, fill=0, color='lime', linestyle='-')
	окружность_раща = plt.Circle(точки_начала, радіусъ_раща, fill=0)

	оси.add_patch(окружность_кудъ)
	оси.add_patch(окружность_паперть)
	оси.add_patch(окружность_сарковь)
	оси.add_patch(окружность_раща)

	for i in range(количество_притворовъ):
		уголъ_для_притворовъ_со_сдвигомъ = уголъ_для_притворовъ * i + 90
		x_притворъ = math.cos(math.radians(уголъ_для_притворовъ_со_сдвигомъ)) * радіусъ_окружности_притворовъ
		y_притворъ = math.sin(math.radians(уголъ_для_притворовъ_со_сдвигомъ)) * радіусъ_окружности_притворовъ
		окружность_притворъ = plt.Circle((x_притворъ, y_притворъ), радіусъ_притворъ, fill=0, hatch='', color='brown')
		оси.add_patch(окружность_притворъ)

	уголъ_начала_сдвига_на_сђвђръ = 90

	# для 1 2
	радіусъ_алея = радіусъ_сарковь + радіусъ_узла

	количество_узловъ = радіусъ_алея * 2 * math.pi // діаметръ 
	уголъ_смђщенія = 360 / количество_узловъ
	while количество_узловъ > 0:
		уголъ_радіанъ = math.radians(уголъ_начала_сдвига_на_сђвђръ + уголъ_смђщенія * количество_узловъ)
		х = round(х0 + радіусъ_алея * math.cos(уголъ_радіанъ), 3)
		у = round(у0 + радіусъ_алея * math.sin(уголъ_радіанъ), 3)
		нарисовать_и_посчитать_узелъ(1, оси, plt, х, у, радіусъ_узла, цвђтъ)
		количество_узловъ -= 1

	радіусъ_алея += (радіусъ_узла * 3)

	количество_полуузловъ = 2 * math.pi * радіусъ_алея // радіусъ_узла
	уголъ_смђщенія = 360 / количество_полуузловъ

	уже_нарисовано_узловъ_въ_тройке = 0

	j = 0
	while j < количество_полуузловъ - 2:
		if уже_нарисовано_узловъ_въ_тройке == 3:
			уже_нарисовано_узловъ_въ_тройке = 0
			j += 1
			continue

		уголъ_радіанъ = math.radians(уголъ_начала_сдвига_на_сђвђръ + уголъ_смђщенія * j)
		х = round(х0 + радіусъ_алея * math.cos(уголъ_радіанъ), 3)
		у = round(у0 + радіусъ_алея * math.sin(уголъ_радіанъ), 3)
		нарисовать_и_посчитать_узелъ(2, оси, plt, х, у, радіусъ_узла, цвђтъ)
		уже_нарисовано_узловъ_въ_тройке += 1
		j += 2

	радіусъ_алея += (радіусъ_узла * 3)


	# для после 3-..
	
	количество_алей = 22
	количество_алей = 10
	количество_рядовъ_образующихъ_уголъ = 2

	уголъ_90_радіанъ = math.radians(90)

	for j in range(1, количество_алей + 1):

		# после 10 уголъ обратный
		уголъ_багита = 360 / (j + 2)
		if j > 7:
			уголъ_багита = 90 - уголъ_багита

		количество_опорныхъ_узловъ = int(радіусъ_алея * 2 * math.pi // (діаметръ * 2.5))
		уголъ_смђщенія = 360 / количество_опорныхъ_узловъ

		# высчитать отдалённость мђжду соузлами лесенки, если мђжду ними есть пересђченђ

		х_опорный_узелъ = round(х0 + радіусъ_алея * math.cos(уголъ_90_радіанъ), 3)
		у_опорный_узелъ = round(у0 + радіусъ_алея * math.sin(уголъ_90_радіанъ), 3)

		уголъ_узла_лесенки_справа_радіанъ = уголъ_90_радіанъ + math.radians(уголъ_багита / -2)
		х_узла_лесенки_справа = round(х_опорный_узелъ + діаметръ * math.cos(уголъ_узла_лесенки_справа_радіанъ), 3)
		у_узла_лесенки_справа = round(у_опорный_узелъ + діаметръ * math.sin(уголъ_узла_лесенки_справа_радіанъ), 3)

		уголъ_узла_лесенки_слђва_радіанъ = уголъ_90_радіанъ + math.radians(уголъ_багита / 2)
		х_узла_лесенки_слђва = round(х_опорный_узелъ + діаметръ * math.cos(уголъ_узла_лесенки_слђва_радіанъ), 3)
		у_узла_лесенки_слђва = round(у_опорный_узелъ + діаметръ * math.sin(уголъ_узла_лесенки_слђва_радіанъ), 3)
			
		отдалённость_соузловъ = найти_протяжённость_мђжду_точками(х_узла_лесенки_справа, у_узла_лесенки_справа, х_узла_лесенки_слђва, у_узла_лесенки_слђва)
		отдалённость_по_лесенке = радіусъ_узла / math.sin(math.radians(уголъ_багита / 2))  if отдалённость_соузловъ < діаметръ else діаметръ

		for jj in range(количество_опорныхъ_узловъ):

			# рисуем опорные узлы 
			уголъ_опорного_узла = уголъ_начала_сдвига_на_сђвђръ + уголъ_смђщенія * jj
			уголъ_опорного_узла_радіанъ = math.radians(уголъ_опорного_узла)
			х_опорный_узелъ = round(х0 + радіусъ_алея * math.cos(уголъ_опорного_узла_радіанъ), 3)
			у_опорный_узелъ = round(у0 + радіусъ_алея * math.sin(уголъ_опорного_узла_радіанъ), 3)
			нарисовать_и_посчитать_узелъ(j + 2, оси, plt, х_опорный_узелъ, у_опорный_узелъ, радіусъ_узла, цвђтъ)

			# рисуем лесенку узловъ за опорнымъ 
			for jjj in (-2, 2):
				уголъ_узла_лесенки = уголъ_опорного_узла + уголъ_багита / jjj
				уголъ_узла_лесенки_радіанъ = math.radians(уголъ_узла_лесенки)
				х = round(х_опорный_узелъ + отдалённость_по_лесенке * math.cos(уголъ_узла_лесенки_радіанъ), 3)
				у = round(у_опорный_узелъ + отдалённость_по_лесенке * math.sin(уголъ_узла_лесенки_радіанъ), 3)
				нарисовать_и_посчитать_узелъ(j + 2, оси, plt, х, у, радіусъ_узла, цвђтъ)
			
		# отступъ мђжду алеями
		радіусъ_алея += (отдалённость_по_лесенке + 3 * радіусъ_узла)

	оси.set_xlim((-радіусъ_алея, радіусъ_алея))
	оси.set_ylim((-радіусъ_алея, радіусъ_алея))
	plt.show()
# раща_1()


def размђтка_по_одному_по_кругу(оси, радіусъ_узла, цвђтъ, уголъ_начала, число_багита, х0, у0, радіусъ0):

	радіусъ_окружности_для_узловъ = радіусъ0 - радіусъ_узла
	количество_узловъ = радіусъ_окружности_для_узловъ * 2 * math.pi // (радіусъ_узла * 4) 
	уголъ_смђщенія = 360 / количество_узловъ
	while количество_узловъ > 0:
		уголъ_радіанъ = math.radians(уголъ_начала + уголъ_смђщенія * количество_узловъ)
		х = round(х0 + радіусъ_окружности_для_узловъ * math.cos(уголъ_радіанъ), 3)
		у = round(у0 + радіусъ_окружности_для_узловъ * math.sin(уголъ_радіанъ), 3)
		нарисовать_и_посчитать_узелъ(число_багита, оси, plt, х, у, радіусъ_узла, цвђтъ)
		# plt.plot(х, у, '+', color=цвђтъ)
		количество_узловъ -= 1


def размђтка_ратки_под_угломъ_1(оси, х_центр_ратки, у_центр_ратки, радіусъ_узла, уголъ_багита, уголъ_начала, х0, у0, радіусъ_допустимая_область, цвђтъ, занятые_узлы):

	количество_узловъ = 12
	радіусъ_окружности_для_узловъ = радіусъ_узла * 4
	радіусъ_окружности_для_раток = радіусъ_узла * 8 + радіусъ_окружности_для_узловъ
	
	уголъ_начала = 90
	угол_смещения_мђжду_ратками = 60
	угол_смещения_для_узлов_ратки = 360 / количество_узловъ

	дальность_от_центра = round(найти_протяжённость_мђжду_точками(х_центр_ратки, у_центр_ратки, х0, у0), 3)

	if (дальность_от_центра + радіусъ_узла * 5) >= радіусъ_допустимая_область or (х_центр_ратки, у_центр_ратки) in занятые_узлы:
		return занятые_узлы

	занятые_узлы.add((х_центр_ратки, у_центр_ратки))
	
	i = 0
	while i < количество_узловъ:
		уголъ_радіанъ = math.radians(уголъ_начала + угол_смещения_для_узлов_ратки * i)
		х = round(х_центр_ратки + радіусъ_окружности_для_узловъ * math.cos(уголъ_радіанъ), 3)
		у = round(у_центр_ратки + радіусъ_окружности_для_узловъ * math.sin(уголъ_радіанъ), 3)
		нарисовать_и_посчитать_узелъ(1, оси, plt, х, у, радіусъ_узла, цвђтъ)
		i += 1

	for i in range(6):
		уголъ_радіанъ = math.radians(угол_смещения_мђжду_ратками * i)
		х_новый_центр_круга = round(х_центр_ратки + радіусъ_окружности_для_раток * math.cos(уголъ_радіанъ), 3)
		у_новый_центр_круга = round(у_центр_ратки + радіусъ_окружности_для_раток * math.sin(уголъ_радіанъ), 3)
		размђтка_ратки_под_угломъ_1(оси, х_новый_центр_круга, у_новый_центр_круга, радіусъ_узла, уголъ_багита, уголъ_начала, х0, у0, радіусъ_допустимая_область, цвђтъ, занятые_узлы)


def размђтка_ратки_под_угломъ_2(оси, х_центр_ратки, у_центр_ратки, радіусъ_узла, уголъ_багита, уголъ_начала, х0, у0, радіусъ_допустимая_область, цвђтъ, занятые_узлы):

	количество_узловъ_дуги = 8
	уголъ_при_центре = 180

	радіусъ_окружности_для_узловъ = опредлить_радіусъ_черезъ_длину_дуги_и_уголъ_при_центре(2 * радіусъ_узла * количество_узловъ_дуги, уголъ_при_центре)

	радіусъ_окружности_для_раток_отвесно = радіусъ_узла * 13
	радіусъ_окружности_для_раток_продольно = радіусъ_узла * 7

	угол_смещения_мђжду_ратками = 90
	угол_смещения_для_узлов_ратки_по_дуге = 360 / (количество_узловъ_дуги * 2)

	if (х_центр_ратки, у_центр_ратки) in занятые_узлы:
		return занятые_узлы

	занятые_узлы.add((х_центр_ратки, у_центр_ратки))
	
	перечень_узлов = []
	for j in range(количество_узловъ_дуги):

		# смещения на радіусъ узла влево/вправо от центра окружности для углов дуги
		уголъ_радіанъ = math.radians(уголъ_начала + 11 + угол_смещения_для_узлов_ратки_по_дуге * j)
		
		# смещенђ по ох если дуга в влђво/вправо
		х = round(х_центр_ратки + радіусъ_узла * (1 if уголъ_начала == 90 else -4.5) + радіусъ_окружности_для_узловъ * math.cos(уголъ_радіанъ), 3)
		у = round(у_центр_ратки + радіусъ_окружности_для_узловъ * math.sin(уголъ_радіанъ), 3)

		дальность_от_центра = round(найти_протяжённость_мђжду_точками(х, у, х0, у0), 3)
		if (дальность_от_центра + радіусъ_узла) > радіусъ_допустимая_область:
			# оси.add_patch(plt.Circle((х, у), радіусъ_узла, fill=0, color='red'))
			return занятые_узлы

		перечень_узлов.append((х, у))

	# если все узлы в допустимой области
	for х, у in перечень_узлов:	
		нарисовать_и_посчитать_узелъ(2, оси, plt, х, у, радіусъ_узла, цвђтъ)
		# оси.plot((х), (у), '+')

	# нарисовать столп узловъ
	for i in (-3, -1, 1, 3):
		# смещенђ по ох если дуга в обратную сторону
		нарисовать_и_посчитать_узелъ(2, оси, plt, 
			х_центр_ратки + радіусъ_узла * (-3.5 if уголъ_начала == 270 else 0),
			у_центр_ратки + i * радіусъ_узла,
			радіусъ_узла, цвђтъ)
		# оси.plot((х_центр_ратки + радіусъ_узла * (-3.5 if уголъ_начала == 270 else 0)), (у_центр_ратки + i * радіусъ_узла), '+')

	# поиск центровъ новыхъ ратокъ
	for i in range(4):

		радіусъ = радіусъ_окружности_для_раток_продольно if i % 2 == 0 else радіусъ_окружности_для_раток_отвесно

		уголъ_радіанъ = math.radians(угол_смещения_мђжду_ратками * i)
		х_новый_центр_круга = round(х_центр_ратки + радіусъ * math.cos(уголъ_радіанъ), 3)
		у_новый_центр_круга = round(у_центр_ратки + радіусъ * math.sin(уголъ_радіанъ), 3)

		if ((у_новый_центр_круга - у0) / радіусъ_окружности_для_раток_отвесно) % 2 == 0:
			уголъ_начала = 90 
		else:
			уголъ_начала = 270

		размђтка_ратки_под_угломъ_2(оси, х_новый_центр_круга, у_новый_центр_круга, радіусъ_узла, уголъ_багита, уголъ_начала, х0, у0, радіусъ_допустимая_область, цвђтъ, занятые_узлы)


def размђтка_ратки_под_угломъ_3_24(оси, х_центр_ратки, у_центр_ратки, радіусъ_узла, число_багита, уголъ_багита, уголъ_начала, х0, у0, радіусъ_допустимая_область, цвђтъ, занятые_узлы, длугость_ратки, радіусъ_окружности_мђжду_ратокъ_продольно, радіусъ_окружности_мђжду_ратокъ_отвђсно, діаметръ, уголъ_радіанъ_90, уголъ_радіанъ_90_безъ_угла_багита):
		
	if (х_центр_ратки, у_центр_ратки) in занятые_узлы:
		return занятые_узлы


	занятые_узлы.add((х_центр_ратки, у_центр_ратки))
	
	перечень_узлов = []

	for j in range(0, 4):

		радіусъ_отдалённость_от_ху = діаметръ * j if j != 3 else длугость_ратки
		х_опорный_узелъ_слђва = round(х_центр_ратки + радіусъ_отдалённость_от_ху * math.cos(уголъ_радіанъ_90), 3)
		у_опорный_узелъ_слђва = round(у_центр_ратки + радіусъ_отдалённость_от_ху * math.sin(уголъ_радіанъ_90), 3)

		# если 2 лђвые вершины в допустимой области
		if j in (0, 3):
			дальность_от_центра = round(найти_протяжённость_мђжду_точками(х_опорный_узелъ_слђва, у_опорный_узелъ_слђва, х0, у0), 3)
			if (дальность_от_центра + радіусъ_узла) > радіусъ_допустимая_область:
				# оси.add_patch(plt.Circle((х_опорный_узелъ_слђва, у_опорный_узелъ_слђва), радіусъ_узла, fill=0, color='red'))
				return занятые_узлы
		перечень_узлов.append((х_опорный_узелъ_слђва, у_опорный_узелъ_слђва))

		# начать от опорного узла вправо
		for jj in range(1, 4):
			
			# оставить ратку пустой
			if j in (1, 2):
				continue

			# нижяя сторона
			if j == 0:
				радіусъ_отдалённость_от_ху = діаметръ * jj if jj != 3 else длугость_ратки
			# верхняя сторона
			elif j == 3:
				радіусъ_отдалённость_от_ху = длугость_ратки - діаметръ * (jj - 1)

			х = round(х_опорный_узелъ_слђва + радіусъ_отдалённость_от_ху * math.cos(уголъ_радіанъ_90_безъ_угла_багита), 3)
			у = round(у_опорный_узелъ_слђва + радіусъ_отдалённость_от_ху * math.sin(уголъ_радіанъ_90_безъ_угла_багита), 3)

			# нарисовать правую сторону от противоположной вершины внизъ
			if j == 3 and jj == 1:
				перечень_узлов.append((х, у - діаметръ))
				перечень_узлов.append((х, у - діаметръ * 2))

			# если и 2 правые вершины в допустимой области
			if j == 3 and jj == 1 or j == 0 and jj == 3:
				дальность_от_центра = round(найти_протяжённость_мђжду_точками(х, у, х0, у0), 3)
				if (дальность_от_центра + радіусъ_узла) > радіусъ_допустимая_область:
					# оси.add_patch(plt.Circle((х_опорный_узелъ_слђва, у_опорный_узелъ_слђва), радіусъ_узла, fill=0, color='red'))
					return занятые_узлы

			перечень_узлов.append((х, у))

	for х, у in перечень_узлов:
		нарисовать_и_посчитать_узелъ(число_багита, оси, plt, х, у, радіусъ_узла, цвђтъ)

	# найти новые вершины раток в 4 стороны
	for i in range(4):

		радіусъ = радіусъ_окружности_мђжду_ратокъ_продольно if i % 2 == 0 else радіусъ_окружности_мђжду_ратокъ_отвђсно

		уголъ_радіанъ = math.radians(90 * i)
		х_новый_центр_круга = round(х_центр_ратки + радіусъ * math.cos(уголъ_радіанъ), 3)
		у_новый_центр_круга = round(у_центр_ратки + радіусъ * math.sin(уголъ_радіанъ), 3)

		размђтка_ратки_под_угломъ_3_24(оси, х_новый_центр_круга, у_новый_центр_круга, радіусъ_узла, число_багита, 
			уголъ_багита, уголъ_начала, х0, у0, радіусъ_допустимая_область, цвђтъ, занятые_узлы, длугость_ратки,
			радіусъ_окружности_мђжду_ратокъ_продольно, радіусъ_окружности_мђжду_ратокъ_отвђсно,
			діаметръ, уголъ_радіанъ_90, уголъ_радіанъ_90_безъ_угла_багита)


def размђтка_ратки_под_угломъ(оси, х_центр_ратки, у_центр_ратки, радіусъ_узла, уголъ_багита, уголъ_начала, х0, у0, радіусъ_допустимая_область, цвђтъ):
	
	занятые_узлы = set()

	if уголъ_багита < 180:

		діаметръ = 2 * радіусъ_узла
		число_багита = 360 / уголъ_багита

		if уголъ_багита <= 40:
			уголъ_багита = 90 - уголъ_багита

		# добавить длину ратки если есть наложенђ при крайнихъ узлахъ при лђвой верхнђй вершине
		уголъ_радіанъ_90 = math.radians(90)
		х1 = х_центр_ратки + діаметръ * 2 * math.cos(уголъ_радіанъ_90)
		у1 = у_центр_ратки + діаметръ * 2 * math.sin(уголъ_радіанъ_90)
		уголъ_радіанъ_90_безъ_угла_багита = math.radians(-90 + уголъ_багита)
		х2 = х_центр_ратки + діаметръ * math.cos(уголъ_радіанъ_90_безъ_угла_багита)
		у2 = у_центр_ратки + діаметръ * math.sin(уголъ_радіанъ_90_безъ_угла_багита) + діаметръ * 3

		протяжённость_мђжду_предкрайними_узлами_ратки_на_угле = найти_протяжённость_мђжду_точками(х1, у1, х2, у2)
		if протяжённость_мђжду_предкрайними_узлами_ратки_на_угле < діаметръ:
			длугость_ратки = діаметръ * 2 + (радіусъ_узла / math.sin(math.radians(уголъ_багита / 2))) 
		else:
			длугость_ратки = діаметръ * 3

		if 65 <= уголъ_багита < 115:
			радіусъ_окружности_мђжду_ратокъ_продольно = радіусъ_узла * 9.5 
		elif 58 < уголъ_багита < 65:
			радіусъ_окружности_мђжду_ратокъ_продольно = радіусъ_узла * 9 
		else:
			радіусъ_окружности_мђжду_ратокъ_продольно = радіусъ_узла * 8.5 
		
		if уголъ_багита > 52:
			радіусъ_окружности_мђжду_ратокъ_отвђсно = радіусъ_узла * 10 
		elif 40 < уголъ_багита < 50:
			радіусъ_окружности_мђжду_ратокъ_отвђсно = радіусъ_узла * 11 
		else:
			радіусъ_окружности_мђжду_ратокъ_отвђсно = радіусъ_узла * 10.5 

		размђтка_ратки_под_угломъ_3_24(
			оси, х_центр_ратки, у_центр_ратки, радіусъ_узла, число_багита, уголъ_багита, 
			уголъ_начала, х0, у0, радіусъ_допустимая_область, цвђтъ, занятые_узлы,
			длугость_ратки, радіусъ_окружности_мђжду_ратокъ_продольно, радіусъ_окружности_мђжду_ратокъ_отвђсно, 
			діаметръ, уголъ_радіанъ_90, уголъ_радіанъ_90_безъ_угла_багита)
				
	elif уголъ_багита == 180:
		
		размђтка_ратки_под_угломъ_2(оси, х_центр_ратки, у_центр_ратки, радіусъ_узла, уголъ_багита, уголъ_начала, х0, у0, радіусъ_допустимая_область, цвђтъ, занятые_узлы)
		
	elif уголъ_багита == 360:

		размђтка_ратки_под_угломъ_1(оси, х_центр_ратки, у_центр_ратки, радіусъ_узла, уголъ_багита, уголъ_начала, х0, у0, радіусъ_допустимая_область, цвђтъ, занятые_узлы)


def размђтка_по_одному_под_угломъ(оси, х, у, радіусъ_узла, уголъ, число_багита, х0у0, радіусъ_допустимая_область, цвђтъ, занятые_узлы=None):

	if занятые_узлы is None:
		занятые_узлы = set()
	
	дальность_от_центра = найти_протяжённость_мђжду_точками(х, у, *х0у0)
	if (дальность_от_центра + радіусъ_узла * 5) >= радіусъ_допустимая_область or (х, у) in занятые_узлы:
		return занятые_узлы
	
	нарисовать_и_посчитать_узелъ(число_багита, оси, plt, х, у, радіусъ_узла, цвђтъ)
	# plt.plot(х, у, '+', color=цвђтъ)
	занятые_узлы.add((х, у))
	
	# нарисовать ещё в трёх направлениях
	for уголъ_для_направления in (-90, 90, 180):
		уголъ_радіанъ = math.radians(уголъ + уголъ_для_направления)
		занятые_узлы = размђтка_по_одному_под_угломъ(
			оси,
			round(х + 4 * радіусъ_узла * math.cos(уголъ_радіанъ), 3),
			round(у + 4 * радіусъ_узла * math.sin(уголъ_радіанъ), 3),
			радіусъ_узла, уголъ + уголъ_для_направления, число_багита, х0у0, радіусъ_допустимая_область, цвђтъ, занятые_узлы)
	
	# вычислить новую точку под углом от текущей
	уголъ_радіанъ = math.radians(уголъ)
	х = round(х + 4 * радіусъ_узла * math.cos(уголъ_радіанъ), 3)
	у = round(у + 4 * радіусъ_узла * math.sin(уголъ_радіанъ), 3)
	
	return размђтка_по_одному_под_угломъ(оси, х, у, радіусъ_узла, уголъ, число_багита, х0у0, радіусъ_допустимая_область, цвђтъ, занятые_узлы)


def найти_ху_узла_для_дуги_узловъ_в_окружности(уголъ_смђщенія, х0, у0, радіусъ_окружности_для_узловъ):

	уголъ_смђщенія_для_узла_в_радіанахъ = math.radians(уголъ_смђщенія)
	х = х0 + радіусъ_окружности_для_узловъ * math.cos(уголъ_смђщенія_для_узла_в_радіанахъ)
	у = у0 + радіусъ_окружности_для_узловъ * math.sin(уголъ_смђщенія_для_узла_в_радіанахъ)
	return (х, у)


def нарисовать_дугу_узловъ_в_окружности(оси, сдвигъ_радіусовъ_узловъ_к_центру, радіусъ_узла, х0, у0, радіусъ0, цвђтъ):
	
	радіусъ_окружности_для_узловъ = радіусъ0 - сдвигъ_радіусовъ_узловъ_к_центру

	if радіусъ_окружности_для_узловъ < радіусъ_узла * 4:
		return 0
	
	уголъ_смђщенія = math.degrees(math.asin(радіусъ_узла * 2 / радіусъ_окружности_для_узловъ))

	количество_узловъ_на_длина_дуги_окружности_для_узловъ = найти_длину_дуги_окружности(радіусъ_окружности_для_узловъ, 180 - 2 * уголъ_смђщенія) / (радіусъ_узла * 2)

	# разрешить наложенђ мђжду узловъ на 1/4
	if количество_узловъ_на_длина_дуги_окружности_для_узловъ % 1 >= 0.75:
		количество_узловъ_на_длина_дуги_окружности_для_узловъ += 1

	количество_узловъ_на_длина_дуги_окружности_для_узловъ = math.ceil(количество_узловъ_на_длина_дуги_окружности_для_узловъ)

	for j in range(1, количество_узловъ_на_длина_дуги_окружности_для_узловъ // 2 + 1):

		уголъ_смещенія_полный = уголъ_смђщенія * j

		ху_узелъ0 = найти_ху_узла_для_дуги_узловъ_в_окружности(уголъ_смещенія_полный, х0, у0, радіусъ_окружности_для_узловъ)
		ху_узелъ180 = найти_ху_узла_для_дуги_узловъ_в_окружности(180 - уголъ_смещенія_полный, х0, у0, радіусъ_окружности_для_узловъ)
		ху_узелъ270 = найти_ху_узла_для_дуги_узловъ_в_окружности(180 + уголъ_смещенія_полный, х0, у0, радіусъ_окружности_для_узловъ)
		ху_узелъ360 = найти_ху_узла_для_дуги_узловъ_в_окружности(-уголъ_смещенія_полный, х0, у0, радіусъ_окружности_для_узловъ)

		нарисовать_и_посчитать_узелъ(1, оси, plt, *ху_узелъ0, радіусъ_узла, цвђтъ)
		нарисовать_и_посчитать_узелъ(1, оси, plt, *ху_узелъ180, радіусъ_узла, цвђтъ)
		нарисовать_и_посчитать_узелъ(1, оси, plt, *ху_узелъ270, радіусъ_узла, цвђтъ)
		нарисовать_и_посчитать_узелъ(1, оси, plt, *ху_узелъ360, радіусъ_узла, цвђтъ)

	if количество_узловъ_на_длина_дуги_окружности_для_узловъ % 2 == 1:
		уголъ_смещенія_полный = уголъ_смђщенія * (j + 1)
		ху_узелъ0 = найти_ху_узла_для_дуги_узловъ_в_окружности(уголъ_смещенія_полный, х0, у0, радіусъ_окружности_для_узловъ)
		ху_узелъ360 = найти_ху_узла_для_дуги_узловъ_в_окружности(-уголъ_смещенія_полный, х0, у0, радіусъ_окружности_для_узловъ)
		нарисовать_и_посчитать_узелъ(1, оси, plt, *ху_узелъ0, радіусъ_узла, цвђтъ)
		нарисовать_и_посчитать_узелъ(1, оси, plt, *ху_узелъ360, радіусъ_узла, цвђтъ)

	сдвигъ_радіусовъ_узловъ_к_центру += 4 * радіусъ_узла

	return нарисовать_дугу_узловъ_в_окружности(оси, сдвигъ_радіусовъ_узловъ_к_центру, радіусъ_узла, х0, у0, радіусъ0, цвђтъ)
	

def нарисовать_дугу_узловъ_в_полуокружности(оси, сдвигъ_радіусовъ_узловъ_внутрь_полуокружности, радіусъ_узла, х_конца_дуги, х0, у0, радіусъ0, цвђтъ, х_главной_о, у_главной_о, радіусъ_главной_о):

	радіусъ_окружности_для_узловъ = радіусъ0 - сдвигъ_радіусовъ_узловъ_внутрь_полуокружности

	if х0 + радіусъ_окружности_для_узловъ - х_конца_дуги < радіусъ_узла * 4:
		return

	уголъ_смђщенія = math.degrees(math.asin(радіусъ_узла * 2 / радіусъ_окружности_для_узловъ))

	# нарисовать полудугу
	j = 1
	while j:
		ху_узелъ = найти_ху_узла_для_дуги_узловъ_в_окружности(уголъ_смђщенія * j, х0, у0, радіусъ_окружности_для_узловъ)
		if ху_узелъ[0] <= х_конца_дуги:
			break
		if not входитъ_ли_окружность_въ_окружность(*ху_узелъ, радіусъ_узла, х_главной_о, у_главной_о, радіусъ_главной_о):
			break

		нарисовать_и_посчитать_узелъ(2, оси, plt, *ху_узелъ, радіусъ_узла, цвђтъ)
		ху_узелъ = найти_ху_узла_для_дуги_узловъ_в_окружности((360 - уголъ_смђщенія) * j, х0, у0, радіусъ_окружности_для_узловъ)
		нарисовать_и_посчитать_узелъ(2, оси, plt, *ху_узелъ, радіусъ_узла, цвђтъ)

		j += 1

	ху_узелъ_начала_отвђса = найти_ху_узла_для_дуги_узловъ_в_окружности(уголъ_смђщенія * (j - 1), х0, у0, радіусъ_окружности_для_узловъ)

	# нарисовать отвђсъ
	j = 2
	while j:
		ху_узелъ = найти_ху_узла_для_дуги_узловъ_в_окружности(90, ху_узелъ_начала_отвђса[0], у0, радіусъ_узла * (j + 1))
		if ху_узелъ[1] > ху_узелъ_начала_отвђса[1]:
			break

		ху_узелъ = найти_ху_узла_для_дуги_узловъ_в_окружности(90, ху_узелъ_начала_отвђса[0], у0, радіусъ_узла * j)
		нарисовать_и_посчитать_узелъ(2, оси, plt, *ху_узелъ, радіусъ_узла, цвђтъ)
		ху_узелъ = найти_ху_узла_для_дуги_узловъ_в_окружности(-90, ху_узелъ_начала_отвђса[0], у0, радіусъ_узла * j)
		нарисовать_и_посчитать_узелъ(2, оси, plt, *ху_узелъ, радіусъ_узла, цвђтъ)

		j += 2

	сдвигъ_радіусовъ_узловъ_внутрь_полуокружности += 4 * радіусъ_узла

	# print(х_конца_дуги - ху_узелъ_начала_отвђса.get_center()[0]  + 3 * радіусъ_узла)
	return нарисовать_дугу_узловъ_в_полуокружности(оси, сдвигъ_радіусовъ_узловъ_внутрь_полуокружности, радіусъ_узла, 
		ху_узелъ_начала_отвђса[0] + 3 * радіусъ_узла, х0, у0, радіусъ0, цвђтъ, 
		х_главной_о, у_главной_о, радіусъ_главной_о)


def размђтка_по_углу_от_оси(оси, радіусъ_узла, цвђтъ, число_багита, уголъ_багита, х0, у0, радіусъ0):

	# если излучатель то все углами наружу кроме 1
	направленђ = ('накопитель', 'излучатель')

	уголъ_багита_радіанъ = math.radians(уголъ_багита)
	уголъ_радіанъ_обратный = уголъ_багита_радіанъ + math.pi
	х_начало_централи = round(х0 + радіусъ0 * math.cos(уголъ_багита_радіанъ), 3)
	у_начало_централи = round(у0 + радіусъ0 * math.sin(уголъ_багита_радіанъ), 3)
	х_конец_централи = round(х0 + радіусъ0 * math.cos(уголъ_радіанъ_обратный), 3)
	у_конец_централи = round(у0 + радіусъ0 * math.sin(уголъ_радіанъ_обратный), 3)	
	
	уголъ_дорожки_радіанъ_слђва = уголъ_багита_радіанъ - math.asin(радіусъ_узла / радіусъ0)
	уголъ_дорожки_радіанъ_справа = уголъ_багита_радіанъ + math.asin(радіусъ_узла / радіусъ0)
	уголъ_дорожки_радіанъ_слђва_обратный = уголъ_дорожки_радіанъ_справа - math.pi
	уголъ_дорожки_радіанъ_слђва_обратный2 = уголъ_дорожки_радіанъ_слђва + math.pi

	уголъ_узловъ_дорожки_радіанъ_слђва = уголъ_багита_радіанъ - math.asin(радіусъ_узла * 2 / радіусъ0)
	уголъ_узловъ_дорожки_радіанъ_справа = уголъ_багита_радіанъ + math.asin(радіусъ_узла * 2 / радіусъ0)
	уголъ_узловъ_дорожки_радіанъ_слђва_обратный = уголъ_узловъ_дорожки_радіанъ_справа - math.pi
	уголъ_узловъ_дорожки_радіанъ_слђва_обратный2 = уголъ_узловъ_дорожки_радіанъ_слђва + math.pi

	х_начало_узловъ_дорожки_справа = round(х0 + радіусъ0 * math.cos(уголъ_узловъ_дорожки_радіанъ_слђва), 3)
	у_начало_узловъ_дорожки_справа = round(у0 + радіусъ0 * math.sin(уголъ_узловъ_дорожки_радіанъ_слђва), 3)
	х_конца_узловъ_дорожки_справа = round(х0 + радіусъ0 * math.cos(уголъ_узловъ_дорожки_радіанъ_слђва_обратный), 3)
	у_конца_узловъ_дорожки_справа = round(у0 + радіусъ0 * math.sin(уголъ_узловъ_дорожки_радіанъ_слђва_обратный), 3)
	
	х_начало_узловъ_дорожки_слђва = round(х0 + радіусъ0 * math.cos(уголъ_узловъ_дорожки_радіанъ_справа), 3)
	у_начало_узловъ_дорожки_слђва = round(у0 + радіусъ0 * math.sin(уголъ_узловъ_дорожки_радіанъ_справа), 3)
	х_конца_узловъ_дорожки_слђва = round(х0 + радіусъ0 * math.cos(уголъ_узловъ_дорожки_радіанъ_слђва_обратный2), 3)
	у_конца_узловъ_дорожки_слђва = round(у0 + радіусъ0 * math.sin(уголъ_узловъ_дорожки_радіанъ_слђва_обратный2), 3)
	
	х_начало_дорожки_справа = round(х0 + радіусъ0 * math.cos(уголъ_дорожки_радіанъ_слђва), 3)
	у_начало_дорожки_справа = round(у0 + радіусъ0 * math.sin(уголъ_дорожки_радіанъ_слђва), 3)
	х_конца_дорожки_справа = round(х0 + радіусъ0 * math.cos(уголъ_дорожки_радіанъ_слђва_обратный), 3)
	у_конца_дорожки_справа = round(у0 + радіусъ0 * math.sin(уголъ_дорожки_радіанъ_слђва_обратный), 3)
	
	х_начало_дорожки_слђва = round(х0 + радіусъ0 * math.cos(уголъ_дорожки_радіанъ_справа), 3)
	у_начало_дорожки_слђва = round(у0 + радіусъ0 * math.sin(уголъ_дорожки_радіанъ_справа), 3)
	х_конца_дорожки_слђва = round(х0 + радіусъ0 * math.cos(уголъ_дорожки_радіанъ_слђва_обратный2), 3)
	у_конца_дорожки_слђва = round(у0 + радіусъ0 * math.sin(уголъ_дорожки_радіанъ_слђва_обратный2), 3)
	
	plt.plot((х_начало_централи, х_конец_централи), (у_начало_централи, у_конец_централи), color=цвђтъ)
	plt.plot((х_начало_дорожки_справа, х_конца_дорожки_справа), (у_начало_дорожки_справа, у_конца_дорожки_справа), color='green')
	plt.plot((х_начало_дорожки_слђва, х_конца_дорожки_слђва), (у_начало_дорожки_слђва, у_конца_дорожки_слђва), color='red')
	plt.plot((х_начало_узловъ_дорожки_справа, х_конца_узловъ_дорожки_справа), (у_начало_узловъ_дорожки_справа, у_конца_узловъ_дорожки_справа), color='blue')
	plt.plot((х_начало_узловъ_дорожки_слђва, х_конца_узловъ_дорожки_слђва), (у_начало_узловъ_дорожки_слђва, у_конца_узловъ_дорожки_слђва), color='yellow')


	if уголъ_багита < 180:

		длина_дорожки_узловъ = определить_длину_отрезка_по_точкамъ(х_начало_узловъ_дорожки_справа, у_начало_узловъ_дорожки_справа, х_конца_узловъ_дорожки_справа, у_конца_узловъ_дорожки_справа)

		одиночный_рядъ_уже_есть = 0
		второй_рядъ_уже_есть = 0

		# найти прилегающій соратникъ по углу и противолежащему
		количество_радіусовъ_мђждурядно = радіусъ_узла / math.atan(math.radians(уголъ_багита)) / радіусъ_узла
		if количество_радіусовъ_мђждурядно < 1:
			количество_радіусовъ_мђждурядно = 1

		j = 1
		while j:

			соотношенђ_отдалённости_точки_то_начала_отрђзка = радіусъ_узла * j / длина_дорожки_узловъ

			if соотношенђ_отдалённости_точки_то_начала_отрђзка > 1:
				break

			х_опорный_узелъ_справа = х_начало_узловъ_дорожки_справа + (х_конца_узловъ_дорожки_справа - х_начало_узловъ_дорожки_справа) * соотношенђ_отдалённости_точки_то_начала_отрђзка
			у_опорный_узелъ_справа = у_начало_узловъ_дорожки_справа + (у_конца_узловъ_дорожки_справа - у_начало_узловъ_дорожки_справа) * соотношенђ_отдалённости_точки_то_начала_отрђзка
			нарисовать_и_посчитать_узелъ(число_багита, оси, plt, х_опорный_узелъ_справа, у_опорный_узелъ_справа, радіусъ_узла, цвђтъ)

			х_опорный_узелъ_слђва = х_начало_узловъ_дорожки_слђва + (х_конца_узловъ_дорожки_слђва - х_начало_узловъ_дорожки_слђва) * соотношенђ_отдалённости_точки_то_начала_отрђзка
			у_опорный_узелъ_слђва = у_начало_узловъ_дорожки_слђва + (у_конца_узловъ_дорожки_слђва - у_начало_узловъ_дорожки_слђва) * соотношенђ_отдалённости_точки_то_начала_отрђзка
			нарисовать_и_посчитать_узелъ(число_багита, оси, plt, х_опорный_узелъ_слђва, у_опорный_узелъ_слђва, радіусъ_узла, цвђтъ)

			уголъ_багита_слђва_радіанъ = math.radians(180)
			уголъ_багита_справа_радіанъ = math.radians(180 + 2 * уголъ_багита)

			jj = 2
			while jj:

				х_справа = round(х_опорный_узелъ_справа + радіусъ_узла * jj * math.cos(уголъ_багита_справа_радіанъ), 3)
				у_справа = round(у_опорный_узелъ_справа + радіусъ_узла * jj * math.sin(уголъ_багита_справа_радіанъ), 3)

				if входитъ_ли_окружность_въ_окружность(х_справа, у_справа, радіусъ_узла, х0, у0, радіусъ0):
					нарисовать_и_посчитать_узелъ(число_багита, оси, plt, х_справа, у_справа, радіусъ_узла, цвђтъ)
				else:
					break

				х_слђва = round(х_опорный_узелъ_слђва + радіусъ_узла * jj * math.cos(уголъ_багита_слђва_радіанъ), 3)
				у_слђва = round(у_опорный_узелъ_слђва + радіусъ_узла * jj * math.sin(уголъ_багита_слђва_радіанъ), 3)
				нарисовать_и_посчитать_узелъ(число_багита, оси, plt, х_слђва, у_слђва, радіусъ_узла, цвђтъ)

				jj += 2
			
			if 90 <= уголъ_багита < 180:
				j += количество_радіусовъ_мђждурядно * 4 if второй_рядъ_уже_есть else количество_радіусовъ_мђждурядно * 2
				второй_рядъ_уже_есть = 0 if второй_рядъ_уже_есть else 1
			elif 15 <= уголъ_багита < 20 or 25 < 90:
				j += количество_радіусовъ_мђждурядно * 3 if второй_рядъ_уже_есть else количество_радіусовъ_мђждурядно * 2
				второй_рядъ_уже_есть = 0 if второй_рядъ_уже_есть else 1
			elif 20 <= уголъ_багита < 25:
				if not второй_рядъ_уже_есть and not одиночный_рядъ_уже_есть: 
					j += количество_радіусовъ_мђждурядно * 2 
					второй_рядъ_уже_есть = 1
				elif второй_рядъ_уже_есть and not одиночный_рядъ_уже_есть: 
					j += количество_радіусовъ_мђждурядно * 3 
					одиночный_рядъ_уже_есть = 1
				elif второй_рядъ_уже_есть and одиночный_рядъ_уже_есть: 
					j += количество_радіусовъ_мђждурядно * 3 
					одиночный_рядъ_уже_есть = 0
					второй_рядъ_уже_есть = 0
			else:
				raise ValueError("Только для 15 <= уголъ < 180")

	elif уголъ_багита == 180:

		# большая часть окружности
		х_отвђсъ = нарисовать_дугу_узловъ_в_полуокружности(оси, радіусъ_узла, радіусъ_узла, х0, х0, у0, радіусъ0, цвђтъ, х0, у0, радіусъ0)

		# меньшая часть окружности
		x_начало = х0 - радіусъ0 - радіусъ_узла
		нарисовать_дугу_узловъ_в_полуокружности(оси, радіусъ_узла, радіусъ_узла, x_начало, x_начало, у0, радіусъ0, цвђтъ, х0, у0, радіусъ0)

	elif уголъ_багита == 360:
		нарисовать_дугу_узловъ_в_окружности(оси, радіусъ_узла, радіусъ_узла, х0, у0, радіусъ0, цвђтъ)


def раща_в_окружности():
	"""
	Ратка круг полукруг угол одиночно
	найти середину линию лепестка алеи
	"""

	рисунокъ, оси = plt.subplots()

	plt.title(inspect.currentframe().f_code.co_name)

	радіусъ_видимая_округа = 150

	# камень
	радіусъ_узелъ = 0.05 
	# трава
	радіусъ_узелъ = 1
	# древокустъ 24 л
	радіусъ_узелъ = 4
	
	угол_наклона_лепестка_от_севера = 30
	уголъ_начала_сдвига_на_сђвђръ = 90
	
	# уголъ_багита_мђжду_ратками_или_одиночными_растениями
	цветъ_багита = 'purple'
	число_багита = 2
	уголъ_багита = 360 / число_багита
	радіусъ_узелъ = 3.89782
	# радіусъ_узелъ = 4
	# print(уголъ_багита)

	радіусъ_допустимая_область_рисования = радіусъ_видимая_округа - 30
	
	точки_начала = (random.randint(-20, 20), random.randint(-20, 20))
	# точки_начала = (0, 0)
	# точки_начала = (20, -20)

	оси.add_patch(plt.Circle(точки_начала, радіусъ_допустимая_область_рисования, fill=0))

	# размђтка_по_одному_по_кругу(оси, радіусъ_узелъ, цветъ_багита, уголъ_багита, число_багита, *точки_начала, радіусъ_допустимая_область_рисования)
	# размђтка_по_одному_под_угломъ(оси, *точки_начала, радіусъ_узелъ, уголъ_багита, число_багита, точки_начала, радіусъ_допустимая_область_рисования, цветъ_багита)	
	
	размђтка_по_углу_от_оси(оси, радіусъ_узелъ, цветъ_багита, число_багита, уголъ_багита, *точки_начала, радіусъ_допустимая_область_рисования)

	# размђтка_ратки_под_угломъ(оси, *точки_начала, радіусъ_узелъ, уголъ_багита, уголъ_начала_сдвига_на_сђвђръ, *точки_начала, радіусъ_допустимая_область_рисования, цветъ_багита)

	оси.set_xlim((-радіусъ_видимая_округа, радіусъ_видимая_округа))
	оси.set_ylim((-радіусъ_видимая_округа, радіусъ_видимая_округа))
	оси.grid()

	plt.show()
# раща_в_окружности()


def найти_точки_прямыхъ_просђки_мђжду_двухъ_окружностей(уголъ_наклона_мђжду_окружностями_радіанъ, х1, у1, радіусъ1, уголъ_полупросђки_на_окружности1_радіанъ, х2, у2, радіусъ2, уголъ_полупросђки_на_окружности2_радіанъ):

	x_центра_оси_на_окружности1 = х1 + math.cos(уголъ_наклона_мђжду_окружностями_радіанъ) * радіусъ1
	y_центра_оси_на_окружности1 = у1 + math.sin(уголъ_наклона_мђжду_окружностями_радіанъ) * радіусъ1

	x_центра_оси_на_окружности2 = х2 + math.cos(уголъ_наклона_мђжду_окружностями_радіанъ) * радіусъ2
	у_центра_оси_на_окружности2 = у2 + math.sin(уголъ_наклона_мђжду_окружностями_радіанъ) * радіусъ2

	уголъ_полупросђки_справа_wъ_центра_на_окружности1_радіанъ = уголъ_наклона_мђжду_окружностями_радіанъ - уголъ_полупросђки_на_окружности1_радіанъ
	x_справа_wъ_центра_оси_на_окружности1 = х1 + math.cos(уголъ_полупросђки_справа_wъ_центра_на_окружности1_радіанъ) * радіусъ1
	y_справа_wъ_центра_оси_на_окружности1 = у1 + math.sin(уголъ_полупросђки_справа_wъ_центра_на_окружности1_радіанъ) * радіусъ1

	уголъ_полупросђки_слђва_wъ_центра_на_окружности1_радіанъ = уголъ_наклона_мђжду_окружностями_радіанъ + уголъ_полупросђки_на_окружности1_радіанъ
	x_слђва_wъ_центра_оси_на_окружности1 = х1 + math.cos(уголъ_полупросђки_слђва_wъ_центра_на_окружности1_радіанъ) * радіусъ1
	y_слђва_wъ_центра_оси_на_окружности1 = у1 + math.sin(уголъ_полупросђки_слђва_wъ_центра_на_окружности1_радіанъ) * радіусъ1

	уголъ_полупросђки_справа_wъ_центра_на_окружности2_радіанъ = уголъ_наклона_мђжду_окружностями_радіанъ - уголъ_полупросђки_на_окружности2_радіанъ
	x_справа_wъ_центра_оси_на_окружности2 = х2 + math.cos(уголъ_полупросђки_справа_wъ_центра_на_окружности2_радіанъ) * радіусъ2
	y_справа_wъ_центра_оси_на_окружности2 = у2 + math.sin(уголъ_полупросђки_справа_wъ_центра_на_окружности2_радіанъ) * радіусъ2

	уголъ_полупросђки_слђва_wъ_центра_на_окружности2_радіанъ = уголъ_наклона_мђжду_окружностями_радіанъ + уголъ_полупросђки_на_окружности2_радіанъ
	x_слђва_wъ_центра_оси_на_окружности2 = х2 + math.cos(уголъ_полупросђки_слђва_wъ_центра_на_окружности2_радіанъ) * радіусъ2
	y_слђва_wъ_центра_оси_на_окружности2 = у2 + math.sin(уголъ_полупросђки_слђва_wъ_центра_на_окружности2_радіанъ) * радіусъ2

	return (
		(x_центра_оси_на_окружности1, y_центра_оси_на_окружности1),
		(x_центра_оси_на_окружности2, у_центра_оси_на_окружности2),
		(x_справа_wъ_центра_оси_на_окружности1, y_справа_wъ_центра_оси_на_окружности1),
		(x_справа_wъ_центра_оси_на_окружности2, y_справа_wъ_центра_оси_на_окружности2),
		(x_слђва_wъ_центра_оси_на_окружности1, y_слђва_wъ_центра_оси_на_окружности1),
		(x_слђва_wъ_центра_оси_на_окружности2, y_слђва_wъ_центра_оси_на_окружности2),
	)


def раща_5():

	рисунокъ, оси = plt.subplots()

	plt.title(inspect.currentframe().f_code.co_name)

	уголъ_смђщенія_для_5 = 72

	цвђтъ = "purple"

	точки_начала = (0, 0)
	# точки_начала = (random.randint(-20, 20), random.randint(-20, 20))

	х0 = точки_начала[0]
	у0 = точки_начала[1]


	радіусъ_узла = 4
	радіусъ_кудъ = 36
	радіусъ_часовня = радіусъ_кудъ / 2
	радіусъ_паперть = радіусъ_кудъ * 2
	ширина_жилы_лепестка = радіусъ_паперть
	радіусъ_средней_окружности_лепестка = радіусъ_кудъ * 8
	радіусъ_большой_окружности_лепестка = радіусъ_средней_окружности_лепестка + ширина_жилы_лепестка
	радіусъ_малой_окружности_лепестка = радіусъ_средней_окружности_лепестка - ширина_жилы_лепестка
	радіусъ_раща = радіусъ_кудъ * 24
	радіусъ_округа = радіусъ_раща * 1.2

	радіусъ_окружности_притворовъ = радіусъ_раща - 23/6 * радіусъ_кудъ
	радіусъ_притворъ_и_сарковь = math.sin(math.radians(уголъ_смђщенія_для_5 / 2)) * радіусъ_окружности_притворовъ - радіусъ_средней_окружности_лепестка
	
	радіусъ_окружности_окончанія_просђки_у_притворовъ = радіусъ_окружности_притворовъ - радіусъ_притворъ_и_сарковь
	радіусъ_начала_лепестка = радіусъ_притворъ_и_сарковь + ширина_жилы_лепестка
	радіусъ_узловъ_окружностей_окончанђ_лепестковъ = радіусъ_раща - радіусъ_средней_окружности_лепестка
	радіусъ_узловъ_окружностей_середины_лепестковъ = радіусъ_узловъ_окружностей_окончанђ_лепестковъ + ширина_жилы_лепестка - радіусъ_средней_окружности_лепестка
	радіусъ_узловъ_окружностей_начала_лепестковъ = радіусъ_узловъ_окружностей_середины_лепестковъ + ширина_жилы_лепестка - радіусъ_малой_окружности_лепестка
	радіусъ_узловъ_часовень = радіусъ_раща - ширина_жилы_лепестка - радіусъ_часовня

	уголъ_полупросђки_на_саркове_радіанъ = найти_уголъ_при_центре_по_радіусу_и_длугости_хорды(радіусъ_узла, радіусъ_притворъ_и_сарковь)
	уголъ_полупросђки_на_притворе_радіанъ = найти_уголъ_при_центре_по_радіусу_и_длугости_хорды(радіусъ_узла, радіусъ_окружности_окончанія_просђки_у_притворовъ)

	окружность_кудъ = plt.Circle(точки_начала, радіусъ_кудъ, fill=0, color='red')
	окружность_паперть = plt.Circle(точки_начала, радіусъ_паперть, fill=0, color='gold')
	окружность_сарковь = plt.Circle(точки_начала, радіусъ_притворъ_и_сарковь, fill=0, color='green')
	окружность_притворовъ = plt.Circle(точки_начала, радіусъ_окружности_притворовъ, fill=0, color='yellow')
	окружность_центровъ_окончанія_лепестка = plt.Circle(точки_начала, радіусъ_узловъ_окружностей_окончанђ_лепестковъ, fill=0, color='lime')
	окружность_центровъ_середины_лепестка = plt.Circle(точки_начала, радіусъ_узловъ_окружностей_середины_лепестковъ, fill=0, color='olive')
	окружность_центровъ_начала_лепестка = plt.Circle(точки_начала, радіусъ_узловъ_окружностей_начала_лепестковъ, fill=0, color='peru')
	окружность_начала_лепестка = plt.Circle(точки_начала, радіусъ_начала_лепестка, fill=0, color='maroon')
	окружность_часовень = plt.Circle(точки_начала, радіусъ_узловъ_часовень, fill=0, color='indigo')
	окружность_раща = plt.Circle(точки_начала, радіусъ_раща, fill=0)

	оси.add_patch(окружность_кудъ)
	оси.add_patch(окружность_паперть)
	оси.add_patch(окружность_сарковь)
	# оси.add_patch(окружность_притворовъ)
	# оси.add_patch(окружность_центровъ_окончанія_лепестка)
	# оси.add_patch(окружность_центровъ_середины_лепестка)
	# оси.add_patch(окружность_центровъ_начала_лепестка)
	оси.add_patch(окружность_начала_лепестка)
	# оси.add_patch(окружность_часовень)
	оси.add_patch(окружность_раща)

	for i in range(5):

		уголъ_смђщенія_притворовъ = уголъ_смђщенія_для_5 * i + 90
		уголъ_смђщенія_притворовъ_радіанъ = math.radians(уголъ_смђщенія_притворовъ)

		x_притворъ = math.cos(уголъ_смђщенія_притворовъ_радіанъ) * радіусъ_окружности_притворовъ
		y_притворъ = math.sin(уголъ_смђщенія_притворовъ_радіанъ) * радіусъ_окружности_притворовъ
		окружность_притворъ = plt.Circle((x_притворъ, y_притворъ), радіусъ_притворъ_и_сарковь, fill=0, color='magenta')
		оси.add_patch(окружность_притворъ)

		# рисуемъ просђки

		ху = найти_точки_прямыхъ_просђки_мђжду_двухъ_окружностей(уголъ_смђщенія_притворовъ_радіанъ,
			х0, у0, радіусъ_притворъ_и_сарковь, уголъ_полупросђки_на_саркове_радіанъ, 
			х0, у0, радіусъ_окружности_окончанія_просђки_у_притворовъ, уголъ_полупросђки_на_притворе_радіанъ)
	
		xу_центра_оси_на_саркове = ху[0]
		xу_центра_оси_на_притворе = ху[1]
		xу_справа_wъ_центра_оси_на_саркове = ху[2]
		xу_справа_wъ_центра_оси_на_притворе = ху[3]
		xу_слђва_wъ_центра_оси_на_саркове = ху[4]
		xу_слђва_wъ_центра_оси_на_притворе = ху[5]

		plt.plot(
			(xу_справа_wъ_центра_оси_на_саркове[0], xу_справа_wъ_центра_оси_на_притворе[0]), 
			(xу_справа_wъ_центра_оси_на_саркове[1], xу_справа_wъ_центра_оси_на_притворе[1]),
			color="chocolate")
		plt.plot(
			(xу_слђва_wъ_центра_оси_на_саркове[0], xу_слђва_wъ_центра_оси_на_притворе[0]), 
			(xу_слђва_wъ_центра_оси_на_саркове[1], xу_слђва_wъ_центра_оси_на_притворе[1]),
			color="chocolate")

		# рисуемъ окружности лепесковъ
		уголъ_для_лепестковъ = уголъ_смђщенія_для_5 * i + 90 - уголъ_смђщенія_для_5 / 2


		# начала лепестка
		x_центра_окружностей_начала_лепестка = math.cos(math.radians(уголъ_для_лепестковъ)) * радіусъ_узловъ_окружностей_начала_лепестковъ
		у_центра_окружностей_начала_лепестка = math.sin(math.radians(уголъ_для_лепестковъ)) * радіусъ_узловъ_окружностей_начала_лепестковъ

		окружность = plt.Circle((x_центра_окружностей_начала_лепестка, у_центра_окружностей_начала_лепестка), 
			радіусъ_средней_окружности_лепестка, fill=0, color='cyan')
		# оси.add_patch(окружность)

		окружность = plt.Circle((x_центра_окружностей_начала_лепестка, у_центра_окружностей_начала_лепестка), 
			радіусъ_малой_окружности_лепестка, fill=0, color='darkviolet')
		# оси.add_patch(окружность)

		# середна лепестка

		x_центра_окружностей_середины_лепестка = math.cos(math.radians(уголъ_для_лепестковъ)) * радіусъ_узловъ_окружностей_середины_лепестковъ
		у_центра_окружностей_середины_лепестка = math.sin(math.radians(уголъ_для_лепестковъ)) * радіусъ_узловъ_окружностей_середины_лепестковъ

		окружность = plt.Circle((x_центра_окружностей_середины_лепестка, у_центра_окружностей_середины_лепестка), 
			радіусъ_малой_окружности_лепестка, fill=0, color='darkviolet')
		# оси.add_patch(окружность)

		полуокружность = Arc((x_центра_окружностей_середины_лепестка, у_центра_окружностей_середины_лепестка), 
			радіусъ_средней_окружности_лепестка * 2, радіусъ_средней_окружности_лепестка * 2, color='cyan', 
			theta1=уголъ_для_лепестковъ - 65, theta2=уголъ_для_лепестковъ + 65)
		оси.add_patch(полуокружность)


		окружность = plt.Circle((x_центра_окружностей_середины_лепестка, у_центра_окружностей_середины_лепестка), 
			радіусъ_большой_окружности_лепестка, fill=0, color='orange')
		# оси.add_patch(окружность)

		# окончанђ лепестка
		x_центра_окружностей_окончанђ_лепестка = math.cos(math.radians(уголъ_для_лепестковъ)) * радіусъ_узловъ_окружностей_окончанђ_лепестковъ
		у_центра_окружностей_окончанђ_лепестка = math.sin(math.radians(уголъ_для_лепестковъ)) * радіусъ_узловъ_окружностей_окончанђ_лепестковъ

		полуокружность = Arc((x_центра_окружностей_окончанђ_лепестка, у_центра_окружностей_окончанђ_лепестка), 
			радіусъ_средней_окружности_лепестка * 2, радіусъ_средней_окружности_лепестка * 2, color='cyan', 
			theta1=уголъ_для_лепестковъ - 100, theta2=уголъ_для_лепестковъ + 100)
		оси.add_patch(полуокружность)

		окружность = plt.Circle((x_центра_окружностей_окончанђ_лепестка, у_центра_окружностей_окончанђ_лепестка),
			радіусъ_малой_окружности_лепестка, fill=0, color='darkviolet')
		# оси.add_patch(окружность)

		# часовни
		x_часовня = math.cos(math.radians(уголъ_для_лепестковъ)) * радіусъ_узловъ_часовень
		y_часовня = math.sin(math.radians(уголъ_для_лепестковъ)) * радіусъ_узловъ_часовень
		окружность_часовня = plt.Circle((x_часовня, y_часовня), радіусъ_часовня, fill=0, color='blue')
		# оси.add_patch(окружность_часовня)

	
	# рисуемъ часовые деревья
	for i in range(1, 25):
		уголъ_для_часовое_дерево = 360 / 24 * i + 90
		x_часовое_дерево = math.cos(math.radians(уголъ_для_часовое_дерево)) * радіусъ_раща
		y_часовое_дерево = math.sin(math.radians(уголъ_для_часовое_дерево)) * радіусъ_раща
		окружность_derevo = plt.Circle((x_часовое_дерево, y_часовое_дерево), радіусъ_узла, fill=0, hatch='', color='purple')
		оси.add_patch(окружность_derevo)

		x_text = x_часовое_дерево + (радіусъ_кудъ if x_часовое_дерево >= 0 else -радіусъ_кудъ*2)
		y_text = y_часовое_дерево + (радіусъ_кудъ if y_часовое_дерево >= 0 else -радіусъ_кудъ*2)
		оси.annotate(i, (x_часовое_дерево, y_часовое_дерево), xytext=(x_text, y_text))

	оси.set_xlim((-радіусъ_округа, радіусъ_округа))
	оси.set_ylim((-радіусъ_округа, радіусъ_округа))

	plt.show()
# раща_5()


def раща_24():

	рисунокъ, оси = plt.subplots()

	plt.title(inspect.currentframe().f_code.co_name)

	цвђтъ = 'purple'

	точки_начала = (0, 0)
	# точки_начала = (random.randint(-20, 20), random.randint(-20, 20))

	х0 = точки_начала[0]
	у0 = точки_начала[1]

	количество_лепестковъ = 24
	количество_притворовъ = 5

	уголъ_для_притворовъ = 360 / количество_притворовъ
	уголъ_для_лепестковъ = 360 / количество_лепестковъ
	уголъ_для_мђжду_лепестковъ = уголъ_для_лепестковъ / 2

	радіусъ_узла = 2
	діаметръ = 2 * радіусъ_узла

	радіусъ_кудъ = 16
	радіусъ_паперть = 3 * радіусъ_кудъ
	радіусъ_сарковь = 4 * радіусъ_паперть
	радіусъ_притворъ = найти_радіусъ_вписаной_окружности_в_равнобедреный_треугольникъ(радіусъ_сарковь, уголъ_для_притворовъ)
	радіусъ_окружности_притворовъ = радіусъ_сарковь - радіусъ_притворъ
	радіусъ_раща = радіусъ_кудъ * 48
	радіусъ_полуокружность_лепестокъ = найти_радіусъ_вписаной_окружности_в_равнобедреный_треугольникъ(радіусъ_раща - радіусъ_узла, уголъ_для_лепестковъ)
	радіусъ_округа = радіусъ_раща * 1.2

	уголъ_полупросђки_на_саркове_радіанъ = найти_уголъ_при_центре_по_радіусу_и_длугости_хорды(радіусъ_узла, радіусъ_сарковь)
	уголъ_полупросђки_на_раще_радіанъ = найти_уголъ_при_центре_по_радіусу_и_длугости_хорды(радіусъ_узла, радіусъ_раща)

	окружность_кудъ = plt.Circle(точки_начала, радіусъ_кудъ, fill=0, color='darkviolet')
	окружность_паперть = plt.Circle(точки_начала, радіусъ_паперть, fill=0, color='blue')
	# окружность_радіусъ_притворовъ = plt.Circle(точки_начала, радіусъ_окружности_притворовъ, fill=0, color='purple', linestyle='--')
	окружность_сарковь = plt.Circle(точки_начала, радіусъ_сарковь, fill=0, color='indigo', linestyle='-')
	радіусъ_окружностей_лепестковъ = радіусъ_раща - радіусъ_полуокружность_лепестокъ
	окружность_раща = plt.Circle(точки_начала, радіусъ_раща, fill=0)

	оси.add_patch(окружность_кудъ)
	оси.add_patch(окружность_паперть)
	# оси.add_patch(окружность_радіусъ_притворовъ)
	оси.add_patch(окружность_сарковь)
	оси.add_patch(окружность_раща)

	for i in range(количество_притворовъ):
		уголъ_для_притворовъ_со_сдвигомъ_радіанъ = math.radians(уголъ_для_притворовъ * i + 90)
		x_притворъ = х0 + math.cos(уголъ_для_притворовъ_со_сдвигомъ_радіанъ) * радіусъ_окружности_притворовъ
		y_притворъ = у0 + math.sin(уголъ_для_притворовъ_со_сдвигомъ_радіанъ) * радіусъ_окружности_притворовъ
		окружность_притворъ = plt.Circle((x_притворъ, y_притворъ), радіусъ_притворъ, fill=0, color='brown')
		оси.add_patch(окружность_притворъ)

	for ј in range(0, количество_лепестковъ):
		
		уголъ_начала_лепестковъ_сђвђръ = 90 + уголъ_для_лепестковъ * ј
		уголъ_начала_лепестковъ_сђвђръ_радіанъ = math.radians(уголъ_начала_лепестковъ_сђвђръ)
		
		# рисуемъ полуокружность лепестка

		x_полуокружность_лепестокъ = х0 + math.cos(уголъ_начала_лепестковъ_сђвђръ_радіанъ) * радіусъ_окружностей_лепестковъ
		y_полуокружность_лепестокъ = у0 + math.sin(уголъ_начала_лепестковъ_сђвђръ_радіанъ) * радіусъ_окружностей_лепестковъ

		полуокружность_лепестокъ = Arc((x_полуокружность_лепестокъ, y_полуокружность_лепестокъ),
			радіусъ_полуокружность_лепестокъ * 2, радіусъ_полуокружность_лепестокъ * 2, color='green', 
			theta1=уголъ_начала_лепестковъ_сђвђръ - 90, theta2=уголъ_начала_лепестковъ_сђвђръ + 90)
		оси.add_patch(полуокружность_лепестокъ)

		# рисуемъ просђки посередине лепестка
		ху = найти_точки_прямыхъ_просђки_мђжду_двухъ_окружностей(уголъ_начала_лепестковъ_сђвђръ_радіанъ,
			х0, у0, радіусъ_сарковь, уголъ_полупросђки_на_саркове_радіанъ, 
			х0, у0, радіусъ_раща, уголъ_полупросђки_на_раще_радіанъ)
	
		xу_справа_wъ_центра_оси_мђжду_лепестками_на_саркове = ху[2]
		xу_справа_wъ_центра_оси_мђжду_лепестками_на_раще = ху[3]
		xу_слђва_wъ_центра_оси_мђжду_лепестками_на_саркове = ху[4]
		xу_слђва_wъ_центра_оси_мђжду_лепестками_на_раще = ху[5]

		kw = dict(linestyle='-', color='lime')
		plt.plot(
			(xу_справа_wъ_центра_оси_мђжду_лепестками_на_саркове[0], xу_справа_wъ_центра_оси_мђжду_лепестками_на_раще[0]), 
			(xу_справа_wъ_центра_оси_мђжду_лепестками_на_саркове[1], xу_справа_wъ_центра_оси_мђжду_лепестками_на_раще[1]),
			**kw)
		plt.plot(
			(xу_слђва_wъ_центра_оси_мђжду_лепестками_на_саркове[0], xу_слђва_wъ_центра_оси_мђжду_лепестками_на_раще[0]), 
			(xу_слђва_wъ_центра_оси_мђжду_лепестками_на_саркове[1], xу_слђва_wъ_центра_оси_мђжду_лепестками_на_раще[1]),
			**kw)


		# рисуемъ просђку мђжду лепестковъ 
		уголъ_начала_мђжду_лепестковъ_сђвђръ_радіанъ = math.radians(уголъ_начала_лепестковъ_сђвђръ + уголъ_для_мђжду_лепестковъ)
		ху = найти_точки_прямыхъ_просђки_мђжду_двухъ_окружностей(уголъ_начала_мђжду_лепестковъ_сђвђръ_радіанъ,
			х0, у0, радіусъ_сарковь, уголъ_полупросђки_на_саркове_радіанъ, 
			х0, у0, радіусъ_раща, уголъ_полупросђки_на_раще_радіанъ)
	
		xу_справа_wъ_центра_оси_мђжду_лепестками_на_саркове = ху[2]
		xу_справа_wъ_центра_оси_мђжду_лепестками_на_раще = ху[3]
		xу_слђва_wъ_центра_оси_мђжду_лепестками_на_саркове = ху[4]
		xу_слђва_wъ_центра_оси_мђжду_лепестками_на_раще = ху[5]

		kw = dict(linestyle='-', color='green')
		plt.plot(
			(xу_справа_wъ_центра_оси_мђжду_лепестками_на_саркове[0], xу_справа_wъ_центра_оси_мђжду_лепестками_на_раще[0]), 
			(xу_справа_wъ_центра_оси_мђжду_лепестками_на_саркове[1], xу_справа_wъ_центра_оси_мђжду_лепестками_на_раще[1]),
			**kw)
		plt.plot(
			(xу_слђва_wъ_центра_оси_мђжду_лепестками_на_саркове[0], xу_слђва_wъ_центра_оси_мђжду_лепестками_на_раще[0]), 
			(xу_слђва_wъ_центра_оси_мђжду_лепестками_на_саркове[1], xу_слђва_wъ_центра_оси_мђжду_лепестками_на_раще[1]),
			**kw)

	оси.set_xlim((-радіусъ_округа, радіусъ_округа))
	оси.set_ylim((-радіусъ_округа, радіусъ_округа))

	plt.show()
# раща_24()


print(СЧЁТЧИКЪ_УЗЛОВЪ)