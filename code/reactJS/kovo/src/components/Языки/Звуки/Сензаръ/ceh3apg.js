// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è —Ç–∏–ø–æ–≤
const PHONEME_TYPE = {
    PHONEME_SOUND: 1,
    PHONEME_PHONEME: 2,
};

const IDEOGRAM_TYPE = {
    CONCEPT: 1,
    IDEA: 2,
};

const LOGOGRAM_TYPE = {
    MORPHEME: 1,
    WORD: 2,
};

// –ë–∞–∑–æ–≤—ã–π –∫–ª–∞—Å—Å –¥–ª—è –≤—Å–µ—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∫–ª–∏–Ω–æ–ø–∏—Å–∏
class BaseCuneiform {
    constructor(symbol, description, type) {
        this.symbol = symbol;
        this.description = description;
        this.type = type; // –¢–∏–ø —Å–∏–º–≤–æ–ª–∞
    }

    getInfo() {
        return `${this.symbol}: ${this.description} (${this.type})`;
    }
}

class Phoneme extends BaseCuneiform {
    constructor(symbol, sound, positionTongue, type, description) {
      super(symbol, description);
      this.sound = sound; // –ó–≤—É–∫, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–∏–º–≤–æ–ª
      this.positionTongue = positionTongue;
      this.type = type;
    }

    getDetails() {
      return `
        –°–∏–º–≤–æ–ª: ${this.symbol}
        –ó–≤—É–∫: ${this.sound}
        –ü–æ–ª–æ–∂–µ–Ω–∏–µ —è–∑—ã–∫–∞: ${this.positionTongue}
        –¢–∏–ø: ${this.type === PHONEME_TYPE.PHONEME_SOUND ? '–§–æ–Ω–µ–º–∞ –∑–≤—É–∫' : '–§–æ–Ω–µ–º–∞'}
        –û–ø–∏—Å–∞–Ω–∏–µ: ${this.description}
      `;
    }
  }


  class Ideogram extends BaseCuneiform {
    constructor(symbol, concept, description) {
      super(symbol, description);
      this.concept = concept; // –ò–¥–µ—è –∏–ª–∏ –∫–æ–Ω—Ü–µ–ø—Ü–∏—è, –∫–æ—Ç–æ—Ä—É—é –ø–µ—Ä–µ–¥–∞–µ—Ç —Å–∏–º–≤–æ–ª
    }

    getDetails() {
      return `
        –°–∏–º–≤–æ–ª: ${this.symbol}
        –ö–æ–Ω—Ü–µ–ø—Ü–∏—è: ${this.concept}
        –¢–∏–ø: –ò–¥–µ–æ–≥—Ä–∞–º–º–∞
        –û–ø–∏—Å–∞–Ω–∏–µ: ${this.description}
      `;
    }
  }


  class Logogram extends BaseCuneiform {
    constructor(symbol, word, description) {
      super(symbol, description);
      this.word = word; // –°–ª–æ–≤–æ –∏–ª–∏ –º–æ—Ä—Ñ–µ–º–∞, –∫–æ—Ç–æ—Ä—É—é –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è–µ—Ç —Å–∏–º–≤–æ–ª
    }

    getDetails() {
      return `
        –°–∏–º–≤–æ–ª: ${this.symbol}
        –°–ª–æ–≤–æ/–ú–æ—Ä—Ñ–µ–º–∞: ${this.word}
        –¢–∏–ø: –õ–æ–≥–æ–≥—Ä–∞–º–º–∞
        –û–ø–∏—Å–∞–Ω–∏–µ: ${this.description}
      `;
    }
  }

class Alphabet {
    constructor(symbols) {
        this.symbols = symbols;
    }

    getSymbols() {
        return this.symbols;
    }

    getCount() {
        return this.symbols.length;
    }
}

class PhonemeAlphabet extends Alphabet { }
class IdeogramAlphabet extends Alphabet { }
class LogogramAlphabet extends Alphabet { }

// –°–æ–∑–¥–∞–Ω–∏–µ –∞–ª—Ñ–∞–≤–∏—Ç–æ–≤
const PHONEME_ALPHABET = new PhonemeAlphabet([
    new Phoneme('üëÖ', 'a', '–ó–≤—É–∫ –¥–æ–∂–¥—è', PHONEME_TYPE.PHONEME_SOUND, '–ü–µ—Ä–µ–¥–Ω—è—è —á–∞—Å—Ç—å —è–∑—ã–∫–∞ –∫–∞—Å–∞–µ—Ç—Å—è –≤–µ—Ä—Ö–Ω–∏—Ö –∑—É–±–æ–≤'),
    new Phoneme('üîªüëÑ', 'b', '–ó–≤—É–∫ –≤–µ—Ç—Ä–∞', PHONEME_TYPE.PHONEME_SOUND, '–ì—É–±—ã –æ–∫—Ä—É–≥–ª–µ–Ω—ã, —è–∑—ã–∫ –≤ –Ω–∏–∂–Ω–µ–º –ø–æ–ª–æ–∂–µ–Ω–∏–∏'),
    new Phoneme('‚¨ÜÔ∏èüëÖ', 'c', '–ó–≤—É–∫ –≥—Ä–æ–º–∞', PHONEME_TYPE.PHONEME_PHONEME, '–Ø–∑—ã–∫ –∫–∞—Å–∞–µ—Ç—Å—è –∑–∞–¥–Ω–µ–π —á–∞—Å—Ç–∏ –Ω—ë–±–∞'),
    new Phoneme('üí®üëÖ', 's', '–ó–≤—É–∫ —à–∏–ø–µ–Ω–∏—è', PHONEME_TYPE.PHONEME_PHONEME, '–Ø–∑—ã–∫ —Å–ª–µ–≥–∫–∞ –ø–æ–¥–Ω—è—Ç, –≤–æ–∑–¥—É—Ö –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —É–∑–∫–∏–π –ø—Ä–æ—Ö–æ–¥'),
    new Phoneme('üëÑüëÖ', 'l', '–®–µ–ª–µ—Å—Ç –ª–∏—Å—Ç–≤—ã', PHONEME_TYPE.PHONEME_PHONEME, '–Ø–∑—ã–∫ –ø–æ–¥–Ω—è—Ç –∏ –∫–∞—Å–∞–µ—Ç—Å—è –≤–µ—Ä—Ö–Ω–∏—Ö –∑—É–±–æ–≤'),
    new Phoneme('üëÖüîä', 't', '–†—ã—á–∞–Ω–∏–µ —Ç–∏–≥—Ä–∞', PHONEME_TYPE.PHONEME_PHONEME, '–Ø–∑—ã–∫ –∫–∞—Å–∞–µ—Ç—Å—è –≤–µ—Ä—Ö–Ω–∏—Ö –∑—É–±–æ–≤, –≤–æ–∑–¥—É—à–Ω—ã–π –ø–æ—Ç–æ–∫ —Ä–µ–∑–∫–∏–π'),
    new Phoneme('üëÖüîÑ', 'r', '–ó–≤—É–∫ –¥—è—Ç–ª–∞', PHONEME_TYPE.PHONEME_PHONEME, '–Ø–∑—ã–∫ –≤–∏–±—Ä–∏—Ä—É–µ—Ç'),
    new Phoneme('üëÖüå¨Ô∏è', 'ch', '–®–µ–ø–æ—Ç –≤–æ–¥—ã', PHONEME_TYPE.PHONEME_PHONEME, '–Ø–∑—ã–∫ –ø—Ä–∏–ø–æ–¥–Ω—è—Ç –∫ –Ω—ë–±—É, –≤–æ–∑–¥—É—Ö –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ —É–∑–∫–∏–π –ø—Ä–æ—Ö–æ–¥'),
    new Phoneme('üëÖüëÉ', 'n', '–ó–≤—É–∫ —É–¥–∞—Ä–∞ –≤–æ–ª–Ω—ã –æ–± –∫–∞–º–µ–Ω—å', PHONEME_TYPE.PHONEME_PHONEME, '–Ø–∑—ã–∫ –∫–∞—Å–∞–µ—Ç—Å—è –Ω—ë–±–∞, –≤–æ–∑–¥—É—Ö –ø—Ä–æ—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –Ω–æ—Å'),
    new Phoneme('üëÖüó£Ô∏è', 'g', '–ó–≤—É–∫ –æ–≥–Ω—è', PHONEME_TYPE.PHONEME_PHONEME, '–Ø–∑—ã–∫ –∫–∞—Å–∞–µ—Ç—Å—è –∑–∞–¥–Ω–µ–π —á–∞—Å—Ç–∏ –≥–æ—Ä–ª–∞'),
    new Phoneme('üëÖ‚¨ÜÔ∏è', 'k', '–ó–≤—É–∫ —Å–ª–∏—è–Ω–∏—è –≤–æ–¥—ã –∏ –æ–≥–Ω—è', PHONEME_TYPE.PHONEME_PHONEME, '–Ø–∑—ã–∫ –∫–∞—Å–∞–µ—Ç—Å—è –≤–µ—Ä—Ö–Ω–µ–≥–æ –Ω—ë–±–∞ –≤ –∑–∞–¥–Ω–µ–π —á–∞—Å—Ç–∏ —Ä—Ç–∞'),
    new Phoneme('üëÑü¶∑', 'f', '–ó–≤—É–∫ —à–∞–≥–æ–≤ –æ—Ä–ª–∞ –ø–æ –ø–µ—Å–∫—É', PHONEME_TYPE.PHONEME_SOUND, '–í–µ—Ä—Ö–Ω–∏–µ –∑—É–±—ã –∫–∞—Å–∞—é—Ç—Å—è –Ω–∏–∂–Ω–µ–π –≥—É–±—ã'),
    new Phoneme('üëÑüëÖ', 'v', '–ó–≤—É–∫ –≤–æ—Å—Ö–æ–¥–∞ —Å–æ–ª–Ω—Ü–∞ –æ—Å–µ–Ω—å—é', PHONEME_TYPE.PHONEME_SOUND, '–ì—É–±—ã —Å–ª–µ–≥–∫–∞ –æ–∫—Ä—É–≥–ª–µ–Ω—ã, —è–∑—ã–∫ —Å–ª–µ–≥–∫–∞ –∫–∞—Å–∞–µ—Ç—Å—è –≤–µ—Ä—Ö–Ω–∏—Ö –∑—É–±–æ–≤'),
]);

const IDEOGRAM_ALPHABET = new IdeogramAlphabet([
    new Ideogram('üê¶', 'birds', IDEOGRAM_TYPE.CONCEPT, '–ü–æ–Ω—è—Ç–∏–µ –ø—Ç–∏—Ü'),
    new Ideogram('üå≥', 'tree', IDEOGRAM_TYPE.CONCEPT, '–ü–æ–Ω—è—Ç–∏–µ –¥–µ—Ä–µ–≤–∞, –ø—Ä–∏—Ä–æ–¥—ã –∏ –∂–∏–∑–Ω–∏'),
    new Ideogram('üî•', 'fire', IDEOGRAM_TYPE.CONCEPT, '–ü–æ–Ω—è—Ç–∏–µ –æ–≥–Ω—è, —ç–Ω–µ—Ä–≥–∏–∏ –∏ —Ç–µ–ø–ª–∞'),
    new Ideogram('‚òÄÔ∏è', 'sun', IDEOGRAM_TYPE.CONCEPT, '–ü–æ–Ω—è—Ç–∏–µ —Å–æ–ª–Ω—Ü–∞, —Å–≤–µ—Ç–∞ –∏ –¥–Ω—è'),
    new Ideogram('‚õ∞Ô∏è', 'mountain', IDEOGRAM_TYPE.CONCEPT, '–ü–æ–Ω—è—Ç–∏–µ –≥–æ—Ä—ã, –≤—ã—Å–æ—Ç—ã –∏ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç–∏'),
    new Ideogram('üíß', 'water', IDEOGRAM_TYPE.CONCEPT, '–ü–æ–Ω—è—Ç–∏–µ –≤–æ–¥—ã, –∂–∏–∑–Ω–∏ –∏ —á–∏—Å—Ç–æ—Ç—ã'),
    new Ideogram('üìñ', 'book', IDEOGRAM_TYPE.IDEA, '–ò–¥–µ—è –∑–Ω–∞–Ω–∏–π –∏ –æ–±—É—á–µ–Ω–∏—è'),
    new Ideogram('üèõÔ∏è', 'temple', IDEOGRAM_TYPE.IDEA, '–ò–¥–µ—è —Å–≤—è—â–µ–Ω–Ω–æ–≥–æ –º–µ—Å—Ç–∞ –∏ –∫—É–ª—å—Ç—É—Ä–Ω–æ–≥–æ –Ω–∞—Å–ª–µ–¥–∏—è'),
    new Ideogram('üöÄ', 'rocket', IDEOGRAM_TYPE.IDEA, '–ò–¥–µ—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è'),
    new Ideogram('üï∞Ô∏è', 'time', IDEOGRAM_TYPE.IDEA, '–ò–¥–µ—è –≤—Ä–µ–º–µ–Ω–∏ –∏ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π'),
    new Ideogram('üé®', 'art', IDEOGRAM_TYPE.IDEA, '–ò–¥–µ—è —Ç–≤–æ—Ä—á–µ—Å—Ç–≤–∞ –∏ —Ö—É–¥–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è'),
]);

const LOGOGRAM_ALPHABET = new LogogramAlphabet([
    new Logogram('üåä', 'wave', LOGOGRAM_TYPE.WORD, '–ö–æ—Ä–µ–Ω—å "–≤–æ–ª–Ω–∞"'),
    new Logogram('üå≤', 'tree', LOGOGRAM_TYPE.WORD, '–ö–æ—Ä–µ–Ω—å "–¥–µ—Ä–µ–≤–æ"'),
    new Logogram('‚≠ê', 'star', LOGOGRAM_TYPE.WORD, '–ö–æ—Ä–µ–Ω—å "–∑–≤–µ–∑–¥–∞"'),
    new Logogram('üåô', 'moon', LOGOGRAM_TYPE.WORD, '–ö–æ—Ä–µ–Ω—å "–ª—É–Ω–∞"'),
    new Logogram('üå∏', 'flower', LOGOGRAM_TYPE.WORD, '–ö–æ—Ä–µ–Ω—å "—Ü–≤–µ—Ç–æ–∫"'),
    new Logogram('‚¨ÜÔ∏è', 'up', LOGOGRAM_TYPE.MORPHEME, '–ü—Ä–∏—Å—Ç–∞–≤–∫–∞ "–ø–æ–¥-"'),
    new Logogram('‚¨áÔ∏è', 'down', LOGOGRAM_TYPE.MORPHEME, '–ü—Ä–∏—Å—Ç–∞–≤–∫–∞ "–ø–æ–¥-"'),
    new Logogram('‚ùÑÔ∏è', 'freeze', LOGOGRAM_TYPE.MORPHEME, '–°—É—Ñ—Ñ–∏–∫—Å "-–º–æ—Ä–æ–∑"'),
    new Logogram('üî•', 'burn', LOGOGRAM_TYPE.MORPHEME, '–°—É—Ñ—Ñ–∏–∫—Å "-–≥–æ—Ä"'),
    new Logogram('üå±', 'grow', LOGOGRAM_TYPE.MORPHEME, '–ü—Ä–∏—Å—Ç–∞–≤–∫–∞ "–ø—Ä–æ-"'),
]);

export { PHONEME_ALPHABET, IDEOGRAM_ALPHABET, LOGOGRAM_ALPHABET };
