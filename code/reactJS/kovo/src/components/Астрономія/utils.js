// изменяется на 0.000013 градуса в год.
// вычисляется на основе юлианской даты и времени с эпохи J2000 (это стандартная астрономическая эпоха, начиная с 1 января 2000 года). В вычислениях учитывается постепенное изменение угла наклона эклиптики со временем.
// угол наклона эклиптики — это угол между плоскостью орбиты Земли вокруг Солнца и плоскостью небесного экватора
// от 22.0 до 24.5
export function вычислитьУголъПлоскостиЭклиптики() {
	const now = new Date();
	const year = now.getUTCFullYear();

	// Параметры для расчета обликвичности эклиптики
	const obliquityEpoch = 2000; // Эпоха J2000
	const obliquityAtEpoch = 23.439292; // Обликвичность эклиптики на эпоху J2000
	const obliquityRate = -0.000013; // Годовая поправка на обликвичность

	// Вычисление количества лет с эпохи J2000
	const yearsSinceEpoch = year - obliquityEpoch;

	// Вычисление обликвичности эклиптики
	const epsilon = obliquityAtEpoch + obliquityRate * yearsSinceEpoch;

	return epsilon
}


const coordinates = {
	sun: { x: 0, y: 0, z: 0 },
	earth: { x: 1, y: 0, z: 0 }, // Примерное положение Земли
	mercury: { x: 0.39, y: 0.05, z: 0 }, // Примерное положение Меркурия
	venus: { x: 0.72, y: 0.08, z: 0 }, // Примерное положение Венеры
	mars: { x: 1.52, y: 0.15, z: 0 }, // Примерное положение Марса
	jupiter: { x: 5.2, y: 0.53, z: 0 }, // Примерное положение Юпитера
	saturn: { x: 9.58, y: 0.72, z: 0 }, // Примерное положение Сатурна
	uranus: { x: 19.2, y: 1.4, z: 0 }, // Примерное положение Урана
	neptune: { x: 30.07, y: 1.8, z: 0 }, // Примерное положение Нептуна
  };
/**
 * Вычисляет угол между двумя векторами в градусах.
 * @param {Object} v1 - Вектор 1 с полями x, y и z.
 * @param {Object} v2 - Вектор 2 с полями x, y и z.
 * @returns {number} - Угол между векторами в градусах.
 */
export function вычислитьУголыМеждуСемлейСолнцемПланетами(v1, v2) {
	// Скалярное произведение векторов (v1 · v2)
	const dotProduct = v1.x * v2.x + v1.y * v2.y + v1.z * v2.z;

	// Длина первого вектора ||v1||
	const magnitudeV1 = Math.sqrt(v1.x ** 2 + v1.y ** 2 + v1.z ** 2);

	// Длина второго вектора ||v2||
	const magnitudeV2 = Math.sqrt(v2.x ** 2 + v2.y ** 2 + v2.z ** 2);

	// Проверка, чтобы длина векторов не была равна нулю
	if (magnitudeV1 === 0 || magnitudeV2 === 0) {
	  return NaN; // Угол не определен
	}

	// Косинус угла между векторами: cos(θ) = (v1 · v2) / (||v1|| * ||v2||)
	const cosineTheta = dotProduct / (magnitudeV1 * magnitudeV2);

	// Убедимся, что значение косинуса угла находится в допустимом диапазоне [-1, 1]
	const clampedCosineTheta = Math.max(-1, Math.min(1, cosineTheta));

	// Угол в радианах: θ = arccos(cos(θ))
	const angleInRadians = Math.acos(clampedCosineTheta);

	// Переводим угол из радианов в градусы: θ (градусы) = θ (радианы) * (180 / π)
	return angleInRadians * (180 / Math.PI);
  }
//   вычислитьУголыМеждуСемлейСолнцемПланетами(coordinates.earth, coordinates.mercury);
